# Python Strings: Medical Insurance Project
# In this project, you will use your new knowledge of Python strings to obtain and clean up medical data so that it is easier to read and analyze.

medical_data = \
"""Marina Allison   ,27   ,   31.1 , 
#7010.0   ;Markus Valdez   ,   30, 
22.4,   #4050.0 ;Connie Ballard ,43 
,   25.3 , #12060.0 ;Darnell Weber   
,   35   , 20.6   , #7500.0;
Sylvie Charles   ,22, 22.1 
,#3022.0   ;   Vinay Padilla,24,   
26.9 ,#4620.0 ;Meredith Santiago, 51   , 
29.3 ,#16330.0;   Andre Mccarty, 
19,22.7 , #2900.0 ; 
Lorena Hodson ,65, 33.1 , #19370.0; 
Isaac Vu ,34, 24.8,   #7045.0"""

print(medical_data)

# Add your code here
# 2. Replace all instances of # in medical_data with $. Store the result in a variable called updated_medical_data.

updated_medical_data = medical_data.replace("#", "$")
print(updated_medical_data)

# 3. We want to calculate the number of medical records in our data. Create a variable called num_records and initialize it at 0.

num_records = 0

# 4. Next, write a for loop to iterate through the updated_medical_data string. Inside of the loop, add 1 to num_records when the current character is equal to $.

for character in updated_medical_data:
  if character == "$":
    num_records += 1

print("There are " + str(num_records) + " in the data.")

# 6. Split the updated_medical_data string into a list of each medical record. Remember that each medical record is separated by a ; in the string. Store the result in a variable called medical_data_split and print this variable.

medical_data_split = updated_medical_data.split(";")
print(medical_data_split)

# 7. define an empty list
medical_records = []

# 8. Next, iterate through medical_data_split and for each record, split the string after each comma (,) and append the split string to medical_records. Print medical_records after the loop.

for record in medical_data_split:
  medical_records.append(record.split(","))
print(medical_records)

# 9. Our data is now slightly more readable. However, it is not properly formatted – it contains unnecessary whitespace. To fix this, let’s start by creating an empty list called `medical_records_clean`.

medical_records_clean = []

# 10. Next, use a for loop to iterate through medical_records. Inside of the loop, create an empty list called record_clean. We’ll use this list to store a formatted version of each medical record.

for clean in medical_records:
  #empty list to store the clean records
  record_clean = [] 
    #nested loop to go through each item in the medical record
  for item in clean:
      #cleaning whitespace for each record
    record_clean.append(item.strip())
  # add the cleaned medical record to the medical_records_clean list
  medical_records_clean.append(record_clean)

# Print medical_records_clean outside of the for loops to see the output, output that is formatted and much easier to read.

print(medical_records_clean)

# 14. Our data is now clean and ready for analysis. For example, to print out the names of each of the ten individuals, we can use the following loop:

#for record in medical_records_clean:
  # update records[0] before the print statement so that all of the characters are uppercase
  #record[0] = record[0].upper()
  #print(record[0])

# 16. Let’s store each name, age, BMI, and insurance cost in separate lists. To start, create four empty lists:
names = []
ages = []
bmis = []
insurance_costs = []

# 17. Next, iterate through medical_records_clean and for each record -- append to each of the lists.

for record in medical_records_clean:
  names.append(record[0])
  ages.append(record[1])
  bmis.append(record[2])
  insurance_costs.append(record[3])

print("Names: " + str(names))
print("Ages: " + str(ages))
print("BMI: "  + str(bmis))
print("Insurance Costs: " + str(insurance_costs))

# 18. create a variable called total_bmi and set it equal to 0
total_bmi = 0

# 19. Let’s calculate the average BMI in our dataset. First, create a variable called total_bmi and set it equal to 0.

for bmi in bmis:
  total_bmi += float(bmi)

average_bmi = total_bmi/len(bmis)
print("Average BMI: " + str(average_bmi))